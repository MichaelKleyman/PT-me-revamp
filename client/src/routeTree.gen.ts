/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedAuthenticatedImport } from './routes/_authenticated/_authenticated'
import { Route as authAuthImport } from './routes/(auth)/auth'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedAuthenticatedRoute = AuthenticatedAuthenticatedImport.update(
  {
    id: '/_authenticated/_authenticated',
    getParentRoute: () => rootRoute,
  } as any,
)

const authAuthRoute = authAuthImport.update({
  id: '/(auth)/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/auth': {
      id: '/(auth)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_authenticated': {
      id: '/_authenticated/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedAuthenticatedImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof authAuthRoute
  '': typeof AuthenticatedAuthenticatedRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof authAuthRoute
  '': typeof AuthenticatedAuthenticatedRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)/auth': typeof authAuthRoute
  '/_authenticated/_authenticated': typeof AuthenticatedAuthenticatedRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | ''
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | ''
  id: '__root__' | '/' | '/(auth)/auth' | '/_authenticated/_authenticated'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authAuthRoute: typeof authAuthRoute
  AuthenticatedAuthenticatedRoute: typeof AuthenticatedAuthenticatedRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authAuthRoute: authAuthRoute,
  AuthenticatedAuthenticatedRoute: AuthenticatedAuthenticatedRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)/auth",
        "/_authenticated/_authenticated"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)/auth": {
      "filePath": "(auth)/auth.tsx"
    },
    "/_authenticated/_authenticated": {
      "filePath": "_authenticated/_authenticated.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
