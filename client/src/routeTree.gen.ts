/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as authAuthImport } from './routes/(auth)/auth'
import { Route as AuthenticatedPracticeIndexImport } from './routes/_authenticated/practice/index'
import { Route as AuthenticatedPatientIndexImport } from './routes/_authenticated/patient/index'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/(auth)/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedPracticeIndexRoute = AuthenticatedPracticeIndexImport.update(
  {
    id: '/practice/',
    path: '/practice/',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
)

const AuthenticatedPatientIndexRoute = AuthenticatedPatientIndexImport.update({
  id: '/patient/',
  path: '/patient/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/auth': {
      id: '/(auth)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/patient/': {
      id: '/_authenticated/patient/'
      path: '/patient'
      fullPath: '/patient'
      preLoaderRoute: typeof AuthenticatedPatientIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/practice/': {
      id: '/_authenticated/practice/'
      path: '/practice'
      fullPath: '/practice'
      preLoaderRoute: typeof AuthenticatedPracticeIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedPatientIndexRoute: typeof AuthenticatedPatientIndexRoute
  AuthenticatedPracticeIndexRoute: typeof AuthenticatedPracticeIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedPatientIndexRoute: AuthenticatedPatientIndexRoute,
  AuthenticatedPracticeIndexRoute: AuthenticatedPracticeIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/auth': typeof authAuthRoute
  '/patient': typeof AuthenticatedPatientIndexRoute
  '/practice': typeof AuthenticatedPracticeIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/auth': typeof authAuthRoute
  '/patient': typeof AuthenticatedPatientIndexRoute
  '/practice': typeof AuthenticatedPracticeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/(auth)/auth': typeof authAuthRoute
  '/_authenticated/patient/': typeof AuthenticatedPatientIndexRoute
  '/_authenticated/practice/': typeof AuthenticatedPracticeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/auth' | '/patient' | '/practice'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/auth' | '/patient' | '/practice'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/(auth)/auth'
    | '/_authenticated/patient/'
    | '/_authenticated/practice/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  authAuthRoute: typeof authAuthRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  authAuthRoute: authAuthRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/(auth)/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/patient/",
        "/_authenticated/practice/"
      ]
    },
    "/(auth)/auth": {
      "filePath": "(auth)/auth.tsx"
    },
    "/_authenticated/patient/": {
      "filePath": "_authenticated/patient/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/practice/": {
      "filePath": "_authenticated/practice/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
